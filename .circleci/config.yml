# Environment Variables required to be set in circleci web config
#
# AWS_SECRET_KEY
# AWS_SECRET_ACCESS_KEY
# BUCKET_NAME
#
### Deployment Workflows:
#
# Push to Branch     | Deploy to Environment
# ------------------ | ---------------------
# integration        | mint
# staging            | HOLD -> staging
# master             | HOLD -> prod
#

version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:12.18
  python:
    docker:
      - image: cimg/python:3.9

commands:
  deploy-serverless:
    description: Deploy code using serverless framework
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: install serverless
          command: sudo npm i -g serverless
      - deploy:
          name: deploy serverless
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              TARGET_ENVIRONMENT=${CIRCLE_TAG}
            else
              TARGET_ENVIRONMENT=${CIRCLE_BRANCH}
            fi
            case $TARGET_ENVIRONMENT in
              master)
                export ENVIRONMENT=mint
                ;;
              *)
                export ENVIRONMENT=${CIRCLE_TAG}
                ;;
            esac
            serverless deploy --stage ${ENVIRONMENT}
  install-aws:
    steps:
      - run:
          name: install aws
          command: |
            pip install awscli
  restore-npm-cache:
    steps:
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "package-lock.json" }}
  save-npm-cache:
    steps:
      - save_cache:
          paths:
            - ./node_modules
          key: v3-dependencies-{{ checksum "package-lock.json" }}

workflows:
  version: 2
  test-build-deploy:
    jobs:
    - cache-dependencies:
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - run-tests:
        requires: [cache-dependencies]
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - build-package:
        requires: [run-tests]
        filters:
          branches:
            only:
            - master
            - integration
            - /[Ff]eature-\w+-\d+[-\w]*/
          tags:
            only:
            - production
            - staging
            - demo
            - mint
            - venus
    # - upload-package:
    #     requires: [build-package]
    #     filters:
    #       branches:
    #         only:
    #         - integration
    #       tags:
    #         only:
    #         - demo
    #         - mint
    #         - venus
    #     context: sba-gov-lower
    # # Get rid of this step since we only deploy with serverless
    # - deploy-package:
    #     requires: [upload-package]
    #     filters:
    #       branches:
    #         only:
    #         - integration
    #       tags:
    #         only:
    #         - demo
    #         - mint
    #         - venus
    #     context: sba-gov-lower
    - deploy-package-serverless:
        requires: [build-package]
        filters:
          branches:
            only:
            - master
          tags:
            only:
            - venus
            - demo
            - mint
        context: sba-gov-lower
    - hold:
        type: approval
        requires: [build-package]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
        context: sba-gov-upper
    - deploy-package-serverless-with-approval:
        requires: [hold]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
jobs:
  cache-dependencies:
    executor: node
    steps:
      - checkout
      # Download and cache dependencies
      - restore-npm-cache
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
      - save-npm-cache
  run-tests:
    executor: node
    steps:
      - checkout
      # Download and cache dependencies
      - restore-npm-cache
      - run:
          name: run run-tests
          command: |
            npm test
  build-package:
    executor: node
    steps:
      - checkout
      - restore-npm-cache
      - run:
          name: create zip package
          command: |
            mkdir build
            mkdir workspace
            cp package.json build/
            cp package-lock.json build/
            cp src/* build/
            cd build
            npm i --prod --silent
            rm package.json
            zip -r -q ../workspace/size-standards.zip .
            cd ..
            rm -rf build
      - persist_to_workspace:
          root: workspace
          paths:
            - size-standards.zip

  deploy-package-serverless:
    executor: node
    steps:
      - deploy-serverless

  deploy-package-serverless-with-approval:
    executor: node
    steps:
      - deploy-serverless
