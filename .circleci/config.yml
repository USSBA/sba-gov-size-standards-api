# Environment Variables required to be set in circleci web config
#
# LOWER_AWS_KEY=
# LOWER_AWS_SECRET=
# UPPER_AWS_KEY=
# UPPER_AWS_SECRET=
### Deployment Workflows:
#
# Push to Branch     | Deploy to Environment
# ------------------ | ---------------------
# staging            | stge
# master             | ON_HOLD -> prod
#

version: 2
workflows:
  version: 2
  test-build-deploy:
    jobs:
    - cache-dependencies
    - npm-test:
        requires: [cache-dependencies]
    - build-package:
        requires: [npm-test]
        filters:
          branches:
            only:
            - stge
            - staging
            - demo
    - deploy-package:
        requires: [build-package]
        filters:
          branches:
            only:
            - stge
            - staging
            - demo
jobs:
  cache-dependencies:
    docker:
      - image: circleci/node:6.10
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
  npm-test:
    docker:
    - image: circleci/node:6.10
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run mocha
          command: |
            npm test
  build-package:
    docker:
      - image: circleci/node:6.10
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: create zip package
          command: |
            mkdir build
            mkdir workspace
            cp package.json build/
            cp src/* build/
            cd build
            npm i --prod --silent
            rm package.json
            zip -r -q ../workspace/size-standards.zip .
            cd ..
            rm -rf build
            mv configuration/api-specification.yaml workspace/api-specification.yaml
      - persist_to_workspace:
          root: workspace
          paths:
            - size-standards.zip
            - api-specification.yaml
  deploy-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest

    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: publish
          shell: /bin/bash -eo pipefail
          command: |
            function set_lower(){ export AWS_ACCESS_KEY_ID=$LOWER_AWS_KEY AWS_SECRET_ACCESS_KEY=$LOWER_AWS_SECRET ;}
            function set_upper(){ export AWS_ACCESS_KEY_ID=$UPPER_AWS_KEY AWS_SECRET_ACCESS_KEY=$UPPER_AWS_SECRET ;}
            
            if [[ "${CIRCLE_BRANCH}" = "master" ]];
            then
              echo BranchNotSupportedException
              exit 255
            else
              export ENVIRONMENT=${CIRCLE_BRANCH}
              set_lower
            fi

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}
            export STACK_NAME="${ENVIRONMENT}-size-standards-sbagov"
            export BUCKET_NAME="${ENVIRONMENT}-sba-sizestandards"

            export OUTPUTS=$(aws cloudformation describe-stacks --stack-name "${STACK_NAME}" | jq '.Stacks[0] | .Outputs')
            export REST_INVOC_ARN=$(echo $OUTPUTS | jq '.[] | select(.OutputKey == "RestLambdaInvocationArn") | .OutputValue' | sed 's|"||g')
            export QUESTION_INVOC_ARN=$(echo $OUTPUTS | jq '.[] | select(.OutputKey == "QuestionLambdaInvocationArn") | .OutputValue' | sed 's|"||g')
            export API_ID=$(echo $OUTPUTS | jq '.[] | select(.OutputKey == "ApiID") | .OutputValue' | sed 's|"||g')
            export ROOT_API_ID=$(echo $OUTPUTS | jq '.[] | select(.OutputKey == "ApiRootID") | .OutputValue' | sed 's|"||g')

            sed -i 's|##Environment##|'${ENVIRONMENT}'|g' workspace/api-specification.yaml
            sed -i 's|##RestLambdaInvocationArn##|'${REST_INVOC_ARN}'|g' workspace/api-specification.yaml
            sed -i 's|##QuestionLambdaInvocationArn##|'${QUESTION_INVOC_ARN}'|g' workspace/api-specification.yaml

            aws s3api put-object --body "workspace/api-specification.yaml" --bucket "${BUCKET_NAME}" --key "api-specification.yaml"
            aws apigateway put-rest-api --rest-api-id ${API_ID} --mode overwrite --body "file://workspace/api-specification.yaml"
            aws apigateway create-resource --rest-api-id ${API_ID} --parent-id ${ROOT_API_ID} --path-part SizeStandard
            aws apigateway create-deployment --rest-api-id ${API_ID} --stage-name LATEST --stage-description "Size Standards API - ${ENVIRONMENT}" --description "Circle CI Deployment"

            export VERSION_ID=$(aws s3api put-object --body workspace/size-standards.zip --bucket "${BUCKET_NAME}" --key "size-standards.zip" | jq '.VersionId' | sed 's|"||g')
            export REST_LAMBDA_ARN=$(echo $OUTPUTS | jq '.[] | select(.OutputKey == "RestLambdaArn") | .OutputValue' | sed 's|"||g')
            export QUESTION_LAMBDA_ARN=$(echo $OUTPUTS | jq '.[] | select(.OutputKey == "QuestionLambdaArn") | .OutputValue' | sed 's|"||g')

            aws lambda update-function-code --function-name "${REST_LAMBDA_ARN}" --s3-bucket "${BUCKET_NAME}" --s3-key "size-standards.zip" --s3-object-version "${VERSION_ID}"
            aws lambda update-function-code --function-name "${QUESTION_LAMBDA_ARN}" --s3-bucket "${BUCKET_NAME}" --s3-key "size-standards.zip" --s3-object-version "${VERSION_ID}"

