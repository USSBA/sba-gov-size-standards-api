# Environment Variables required to be set in circleci web config
#
# AWS_SECRET_KEY
# AWS_SECRET_ACCESS_KEY
# BUCKET_NAME
#
### Deployment Workflows:
#
# Push to Branch     | Deploy to Environment
# ------------------ | ---------------------
# integration        | mint
# staging            | HOLD -> staging
# master             | HOLD -> prod
#

version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:12.18
  aws:
    docker:
      - image: ussba/cc-docker-git-aws:latest

commands:
  deploy-serverless:
    description: Deploy code using serverless framework
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: install serverless
          command: sudo npm i -g serverless
      - deploy:
          name: deploy serverless
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              TARGET_ENVIRONMENT=${CIRCLE_TAG}
            else
              TARGET_ENVIRONMENT=${CIRCLE_BRANCH}
            fi
            case $TARGET_ENVIRONMENT in
              master)
                export ENVIRONMENT=mint
                ;;
              *)
                export ENVIRONMENT=${CIRCLE_TAG}
                ;;
            esac
            serverless deploy --stage ${ENVIRONMENT}

workflows:
  version: 2
  test-build-deploy:
    jobs:
    - cache-dependencies:
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - run-tests:
        requires: [cache-dependencies]
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - build-package:
        requires: [run-tests]
        filters:
          branches:
            only:
            - master
            - integration
            - /[Ff]eature-\w+-\d+[-\w]*/
          tags:
            only:
            - production
            - staging
            - demo
            - mint
            - venus
    # - upload-package:
    #     requires: [build-package]
    #     filters:
    #       branches:
    #         only:
    #         - integration
    #       tags:
    #         only:
    #         - demo
    #         - mint
    #         - venus
    #     context: sba-gov-lower
    # # Get rid of this step since we only deploy with serverless
    # - deploy-package:
    #     requires: [upload-package]
    #     filters:
    #       branches:
    #         only:
    #         - integration
    #       tags:
    #         only:
    #         - demo
    #         - mint
    #         - venus
    #     context: sba-gov-lower
    - deploy-package-serverless:
        requires: [build-package]
        filters:
          branches:
            only:
            - master
          tags:
            only:
            - venus
            - mint
        context: sba-gov-lower
    - hold:
        type: approval
        requires: [build-package]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
    - upload-package-with-approval:
        requires: [hold]
        filters:
          branches:
            ignore:
            - /.*
          tags:
            only:
            - production
            - staging
        context: sba-gov-upper
    - deploy-package-with-approval:
        requires: [upload-package-with-approval]
        filters:
          branches:
            ignore:
            - /.*
          tags:
            only:
            - production
            - staging
        context: sba-gov-upper
    - deploy-package-serverless-with-approval:
        requires: [hold]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
jobs:
  cache-dependencies:
    executor: node
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
  run-tests:
    executor: node
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run run-tests
          command: |
            npm test
  build-package:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: create zip package
          command: |
            mkdir build
            mkdir workspace
            cp package.json build/
            cp package-lock.json build/
            cp src/* build/
            cd build
            npm i --prod --silent
            rm package.json
            zip -r -q ../workspace/size-standards.zip .
            cd ..
            rm -rf build
      - persist_to_workspace:
          root: workspace
          paths:
            - size-standards.zip
  # upload-package:
  #   executor: aws
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: workspace
  #     - run:
  #         name: publish
  #         shell: /bin/bash -eo pipefail
  #         command: |
  #           if [ -z "${CIRCLE_BRANCH}" ]
  #           then
  #             ENVIRONMENT=${CIRCLE_TAG}
  #           else
  #             ENVIRONMENT=${CIRCLE_BRANCH}
  #           fi

  #           export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
  #           export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

  #           SOURCE_PREFIX=${ENVIRONMENT}
  #           if [ "$SOURCE_PREFIX" == "integration" ]
  #           then
  #             SOURCE_PREFIX=mint
  #           fi

  #           aws s3api put-object --body "workspace/size-standards.zip" --bucket "${BUCKET_NAME}" --key "${SOURCE_PREFIX}/size-standards.zip"

  # deploy-package:
  #   executor: aws
  #   steps:
  #     - checkout
  #     - run:
  #         name: deploy
  #         shell: /bin/bash -eo pipefail
  #         command: |
  #           if [ -z "${CIRCLE_BRANCH}" ]
  #           then
  #             TARGET_ENVIRONMENT=${CIRCLE_TAG}
  #           else
  #             TARGET_ENVIRONMENT=${CIRCLE_BRANCH}
  #           fi

  #           case $TARGET_ENVIRONMENT in
  #             integration)
  #               export ENVIRONMENT=mint
  #               ;;
  #             *)
  #               export ENVIRONMENT=${CIRCLE_TAG}
  #               ;;
  #           esac

  #           export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
  #           export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

  #           export VERSION_ID=$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --prefix "${ENVIRONMENT}/size-standards.zip" | jq '.Versions[0].VersionId')

  #           aws lambda update-function-code --function-name "${ENVIRONMENT}-SizeStandardRestLambda" --s3-bucket "${BUCKET_NAME}" --s3-key "${ENVIRONMENT}/size-standards.zip" --s3-object-version "${VERSION_ID}"
  #           aws lambda update-function-code --function-name "${ENVIRONMENT}-SizeStandardQuestionLambda" --s3-bucket "${BUCKET_NAME}" --s3-key "${ENVIRONMENT}/size-standards.zip" --s3-object-version "${VERSION_ID}"

  upload-package-with-approval:
    executor: aws
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: publish
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              ENVIRONMENT=${CIRCLE_TAG}
            else
              ENVIRONMENT=${CIRCLE_BRANCH}
            fi

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            SOURCE_PREFIX=${ENVIRONMENT}

            aws s3api put-object --body "workspace/size-standards.zip" --bucket "${BUCKET_NAME}" --key "${SOURCE_PREFIX}/size-standards.zip"

  deploy-package-with-approval:
    executor: aws
    steps:
      - checkout
      - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              TARGET_ENVIRONMENT=${CIRCLE_TAG}
            else
              TARGET_ENVIRONMENT=${CIRCLE_BRANCH}
            fi

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            export VERSION_ID=$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --prefix "${TARGET_ENVIRONMENT}/size-standards.zip" | jq '.Versions[0].VersionId')

            aws lambda update-function-code --function-name "${TARGET_ENVIRONMENT}-SizeStandardRestLambda" --s3-bucket "${BUCKET_NAME}" --s3-key "${TARGET_ENVIRONMENT}/size-standards.zip" --s3-object-version "${VERSION_ID}"
            aws lambda update-function-code --function-name "${TARGET_ENVIRONMENT}-SizeStandardQuestionLambda" --s3-bucket "${BUCKET_NAME}" --s3-key "${TARGET_ENVIRONMENT}/size-standards.zip" --s3-object-version "${VERSION_ID}"

  deploy-package-serverless:
    executor: node
    steps:
      - deploy-serverless

  deploy-package-serverless-with-approval:
    executor: node
    steps:
      - deploy-serverless
